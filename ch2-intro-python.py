# 파이썬 리뷰 

파이썬은 C, C++과 같이 컴파일 언어가 아니다. 
컴파일 언어는 프로그램 작성부터 실행까지 험난한데 소스코드에 작은 오류 있어도 컴파일 ㅏㅇㄴ되고 실행 불가. 하지만 파이썬은 인터프리터 방식으로 한문장 입력하면 곧바로 실행. 일부만 코드 작성하고 오류있더라도 오류 발생전까지 실행가능함





# 2-1.리터럴과 자료형
프로그램 소스에서 10, 3.14, "gameover"처럼 문자열 그 자체가 값을 가지는것을 리터럴이라고 한다
10은 정수, 3.14는 실수로 예상되는데 이러한 리터럴들은 그 형태에 따라 자료형이 결정됨

|내장자료형|리터럴
|---|---|
|int|10,0xfffe|
|float|-0.45, 123.032E-13|
|complex복소수|complex(1,2), 1+2j|
|bool|True, False|
|str|'game', "over"|
|list|[],[0,1,2,"hello"]|
|tuple|(1, 2, 3, 'd')|
|dict|{"a":1}|
|set,frozenset|{1,2,3}|

# 2-2. 파이썬 변수동작

C에서는 변수를 선언하는게 변수를 저장하기 위한 메모리 공간을 컴파일러가 미리 확보하도록 하는것인데 파이썬은 그럴필요가 없다. 

```
number = 132
```

이때 number에 132가 들어있는게 아니라 number가 132정수객체가 있는 것을 참조함.

- 파이썬에서는 모든 자료가 클래스로부터 만들어진 객체이다
- 파이썬에서 변수는 다른 객체를 참조하는 참조자 또는 포인터 역할이다

예를들어 number =132는 변수 umber가 만들어지고 리터럴 132에 의해 만들어진 int 객체를 참조하게 된다. 이떄 number = 99를 추가하면 객체 132는 더 이상 참조하는 변수가 없다. 그러면 더 이상 프로그램에서 필요가 없어 자동 삭제된다.



# 2-3. 컬렉션자료형

여러 자료를 묶어 한번에 저장하고 처리할 수 있는 컬렉션형 자료형
- 시퀀스(str, list, tuple)
- 집합(set, frozenset)
- 매핑형(dict)


# 2-4.  변수 범위

 - built-in scope : 프로그램내 어디서든 사용가능 (내장함수등)
 - global scope : 소스파일 맨꼭대기에 생성된 변수 또는 함수나 클래스 밖 (파이썬에서는 global 키워드 사용해야함) 프로그램 의어디서든 사용가능
 - local scope : 함수나 클래스의 멤버함수(메소드) 안에서 생성된 변수들로 그 안에서만 사용가능 
 - instance scope : 클래스의 데이터 멤버로 생성된 변수들로 그클래스 내의 다른 함수들에서 사용가능  

# 2-5. 모듈공간과 네임스페이스

- 네임스페이스(모든 모듈들은 자신의 네임스페이스가 이루고 있는데 같은 네임스페이스안에서는 모든 식별자를 자유롭게 상요가능하다)


